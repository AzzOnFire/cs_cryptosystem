#pragma once

#include "defines.hpp"

/*
	Dirty and ugly, but works
	TODO remove template
*/
template <size_t n>
byte Multiply8(byte arg1, byte arg2) {
	short result = 0;

	for (unsigned char bit = 0x80; bit > 0; bit >>= 1) {
		result <<= 1;

		if (result & 0x100)
			result ^= 0x11D;

		if (bit & arg2)
			result ^= arg1;
	}

	return result;
}


template <size_t n>
struct Coeffs {
	byte array[bits_to_bytes(n)];
};

template <>
struct Coeffs<64> {
	byte array[bits_to_bytes(64)] = { 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18 };
};

template <>
struct Coeffs<128> {
	byte array[bits_to_bytes(128)] = { 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18 };
};

template <>
struct Coeffs<256> {
	byte array[bits_to_bytes(256)] = { 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
							0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18 };
};

template <>
struct Coeffs<512> {
	byte array[bits_to_bytes(512)] = { 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
						0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
						0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
						0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18 };
};


/**
* Disperse data
* Available block sizes: 64, 128, 256, 512
*
* @param block Binary block of data, used to save the result
* @return block Binary block of dispersed data
*/
template <size_t n>
byte* disperse(byte* block) {
	constexpr size_t len = n / 8;

	constexpr Coeffs<n> coeffs = Coeffs<n>();

	for (int i = 0; i < len; ++i) {
		byte last = 0;
		for (int j = 0; j < len; ++j)
			last ^= Multiply8<n>(coeffs.array[j], block[j]);

		for (int j = 1; j < len; ++j)
			block[j - 1] = block[j];

		block[len - 1] = last;
	}

	return block;
}
