#pragma once


byte Multiply8(byte arg1, byte arg2) {
	short result = 0;

	for (unsigned char bit = 0x80; bit > 0; bit >>= 1) {
		result <<= 1;

		if (result & 0x100)
			result ^= 0x11D;

		if (bit & arg2)
			result ^= arg1;
	}

	return result;
}

byte coeffs64[8] = { 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18 };
byte coeffs128[16] = { 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18 };
byte coeffs256[32] = { 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
						0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18 };
byte coeffs512[64] = { 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
						0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
						0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
						0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18 };

constexpr byte* GetCoeffs(size_t n)
{
	switch (n)
	{
	case 64:
		return coeffs64;
	case 128:
		return coeffs128;
	case 256:
		return coeffs256;
	case 512:
		return coeffs512;
	}

	return 0;
}

/**
* Disperse data
* Available block sizes: 64, 128, 256, 512
*
* @param block Binary block of data, used to save the result
* @return block Binary block of dispersed data
*/
template <size_t n>
byte* disperse(byte* block)
{
	constexpr size_t len = n / 8;
	constexpr byte* coeffs = GetCoeffs(n);

	for (int i = 0; i < len; ++i)
	{
		byte last = 0;
		for (int j = 0; j < len; ++j)
			last ^= Multiply8(coeffs[j], block[j]);

		for (int j = 1; j < len; ++j)
			block[j - 1] = block[j];

		block[len - 1] = last;
	}

	return block;
}