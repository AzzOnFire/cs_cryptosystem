#include "pch.h"

#include "../cs_cryptosystem/defines.hpp"
#include "../cs_cryptosystem/iv.hpp"
#include "utils.hpp"


void print_byte_array(byte* array, size_t length) {
    for (size_t i = 0; i < length; ++i) {
        printf("%02x ", array[i] & 0xff);
    }

    printf("\n");
}

bool cmp_byte_array(byte* first, byte* second, size_t length) {
    for (size_t i = 0; i < length; ++i) {
        if (first[i] != second[i])
            return false;
    }

    return true;
}


byte* get_test_iv(const size_t n) {
    byte iv_64[] = { 
        0x42, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x81, 0xb2, 0x5e, 0x0, 0x0, 0x0, 0x0
    };

    byte iv_128[] = {
        0x42, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x81, 0xb2, 0x5e, 0x0, 0x0, 0x0, 0x0,
        0xa9, 0x3e, 0x45, 0x17, 0x2, 0x5a, 0xdd, 0x5d, 0xd7, 0xea, 0xae, 0x17, 0xed, 0x53, 0xc8, 0x30
    };

    byte iv_256[] = {
        0x42, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x81, 0xb2, 0x5e, 0x0, 0x0, 0x0, 0x0,
        0xe9, 0x67, 0xa4, 0x2f, 0x26, 0x62, 0xfb, 0x16, 0xe9, 0xc0, 0xda, 0xaf, 0x8d, 0xd6, 0xda, 0x58,
        0x9f, 0xe8, 0x90, 0x9, 0x8b, 0xb3, 0xc4, 0x55, 0xa, 0xa1, 0xa7, 0xde, 0xba, 0xc3, 0xdd, 0x32,
        0xb7, 0xb7, 0x92, 0x66, 0x8a, 0xdc, 0xbd, 0x65, 0x4d, 0x67, 0x2f, 0x3d, 0xe9, 0x16, 0x7b, 0x7f
    };

    byte iv_512[] = {
        0x42, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x81, 0xb2, 0x5e, 0x0, 0x0, 0x0, 0x0,
        0x6f, 0xb1, 0xc, 0x36, 0x95, 0x44, 0x5c, 0xfb, 0xa2, 0xc0, 0x29, 0x0, 0xd0, 0xef, 0xdb, 0xf2,
        0xb8, 0x82, 0x43, 0xab, 0x37, 0xaf, 0xde, 0xf5, 0xe5, 0x84, 0x85, 0x93, 0xc1, 0xde, 0xa6,
        0x87, 0x66, 0x3f, 0x66, 0x46, 0x59, 0x8, 0xb3, 0x8, 0x12, 0x98, 0x2c, 0x9, 0xf9, 0xed, 0x20,
        0xaa, 0x99, 0x96, 0xf, 0x2c, 0x7d, 0xfe, 0x6f, 0xbf, 0xb0, 0xf8, 0x9c, 0xed, 0xa3, 0xb6, 0xc9,
        0xf2, 0xa3, 0x11, 0x6c, 0xd6, 0x50, 0x91, 0xb9, 0xc8, 0x7a, 0x15, 0xfd, 0x65, 0x68, 0x10, 0x10,
        0x4a, 0x4a, 0xad, 0xaf, 0x82, 0x25, 0x5, 0xd2, 0x3b, 0xa, 0xe, 0xd3, 0xb4, 0x76, 0xe9, 0xc9, 0x22,
        0x22, 0x61, 0xdb, 0x24, 0xc6, 0xf, 0x50, 0xa3, 0x2d, 0x37, 0xef, 0x9e, 0x8a, 0x1, 0x33, 0xb0
    };

    size_t size = bits_to_bytes(n) * 2;
    byte* iv = new byte[size];

    switch (n) {
    case 64:
        memcpy(iv, iv_64, size);
        break;
    case 128:
        memcpy(iv, iv_128, size);
        break;
    case 256:
        memcpy(iv, iv_256, size);
        break;
    case 512:
        memcpy(iv, iv_512, size);
        break;
    }

    return iv;
}

byte* get_test_key(size_t n) {
    byte key_64[] = {
        0xdb, 0x65, 0xf, 0x4b, 0x21, 0x70, 0x98, 0x2, 0xf5, 0x2, 0xc5, 0x9d, 0x1c, 0x73, 0x7f, 0xab
    };
    byte key_128[] = {
        0x9d, 0xfc, 0xeb, 0xf9, 0x9a, 0x39, 0x63, 0xa6, 0xdd, 0x40, 0x5d, 0x56,0x14, 0x97, 0x17, 0x49,
        0xd6, 0xfa, 0x83, 0xd0, 0x72, 0x9e, 0x81, 0xff, 0x9f, 0x31, 0x1f, 0xea, 0xd0, 0xcf, 0x65, 0x12
    };
    byte key_256[] = {
        0x1b, 0xa9, 0x65, 0x8f, 0x34, 0x59, 0xf9, 0x76, 0xa, 0x1c, 0x3d, 0xc5, 0x9d, 0x4e, 0x2a, 0xba,
        0x4a, 0x44, 0x31, 0x48, 0x48, 0x14, 0x5b, 0xd, 0x9a, 0xc6, 0x51, 0x2e, 0xd5, 0xe7, 0xd, 0x2f,
        0x73, 0x2b, 0x39, 0xd, 0x3, 0xa4, 0xee, 0xff, 0x3d, 0xb5, 0xf1, 0xf2, 0xa4, 0xd1, 0x63, 0x13,
        0x6a, 0xd0, 0x24, 0x94, 0xcc, 0x2a, 0x2a, 0xcc, 0xdb, 0xa8, 0x57, 0xe1, 0x53, 0x3c, 0xe3, 0x2c
    };
    byte key_512[] = {
        0xdf, 0xb, 0xf3, 0x1f, 0xa4, 0xa1, 0x12, 0xb0, 0x68, 0x72, 0x5, 0xb1, 0x62, 0xba, 0x10, 0x29,
        0x67, 0x92, 0x6d, 0x36, 0x62, 0x19, 0xd8, 0x8b, 0xc3, 0xe5, 0xf0, 0x42, 0xd4, 0xc0, 0xdc, 0x81,
        0xb5, 0xe, 0xc, 0xc6, 0x72, 0x47, 0x52, 0xc7, 0x66, 0xd5, 0x2b, 0x70, 0x29, 0x5d, 0xc4, 0x2b,
        0x33, 0xf3, 0xc1, 0xa5, 0xb5, 0x3c, 0xd8, 0x4b, 0x67, 0x95, 0x4b, 0xa3, 0x9f, 0xc9, 0x2c, 0x55,
        0xfe, 0x6f, 0xed, 0xfc, 0x9d, 0x6a, 0x20, 0x4b, 0xb3, 0x4, 0x71, 0x3d, 0xe, 0x22, 0x70, 0x5, 0xd2,
        0xa9, 0xef, 0xb3, 0x4f, 0xb2, 0x23, 0xff, 0xfa, 0x18, 0x79, 0x20, 0xa9, 0x8c, 0x62, 0xbd, 0xc6,
        0xfc, 0xc8, 0x62, 0x53, 0x1b, 0x99, 0x27, 0xa1, 0x89, 0x38, 0xf8, 0x22, 0x86, 0xdd, 0xcf, 0xe2,
        0xd7, 0x3f, 0x6a, 0x18, 0x92, 0xa2, 0x28, 0xc, 0xb5, 0xeb, 0xac, 0x6b, 0x4a, 0xe1, 0x2c
    };

    size_t size = bits_to_bytes(n) * 2;
    byte* key = new byte[size];
	
	switch (n) {
	case 64:
        memcpy(key, key_64, size);
        break;
	case 128:
        memcpy(key, key_128, size);
        break;
	case 256:
        memcpy(key, key_256, size);
        break;
	case 512:
        memcpy(key, key_512, size);
        break;
	}

	return key;
}
